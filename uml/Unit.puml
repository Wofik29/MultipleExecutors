@startuml

package unit {
    interface Executor {
        +setAlgorithm(HashMap<Integer, String[]>): void
        +step(): void
        +reset(): void
        +isEnd(): boolean
        +checkCell(): void
        +stepForward(): void
        +stepBack(): void
        +turnRight(): void
        +turnLeft(): void
    }

    abstract class Unit implements Executor {
        +Unit(int, int, Direction, game):
        +getX(): int
        +getY(): int
        +setX(int): void
        +setY(int): void
        +reset(): void
        +isEnd(): boolean
        +setAlgorithm(HashMap<Integer, String[]>): void
        +setVisible(visible): void
        +flipMapCell(): void
        +checkCell(): void
        +stepForward(): void
        +stepBack(): void
        +step(): void
        +turnRight(): void
        +turnLeft(): void
        +cellWithDirection: HashMap<Direction, Cell>
        +algorithm: HashMap<Integer, String[]>
        +game: Main
        +x: int
        +y: int
        +stepX: int
        +stepY: int
        +startX: int
        +startY: int
        +current: int
        +direction: Direction
        +currentCell: Cell
        +visible: boolean
        +allowCell: ArrayCell<Cell>
    }

    class Explorer extends Unit
    class Harvester extends Unit

    enum Direction {
        Left, Right, Up, Down;
    }

    class ControlCenter {
        +ControlCenter(int, int, int, int, Main): void
        +upSpeed(): void
        +downSpeed(): void
        +getExplorers(): Explorer[]
        +setUpHarvester(): void
        +getExplorersCount(): int
        +getHarvesterCount(): int
        +step(): void
        +updateExplorerAlgorithm(String): void
        +x: int
        +y: int
        +explorers: Executor[]
        +harvesters: Executor[]
        +explorerAlgorithm: String
        +period: int
        +last: long
        +isRunHarvester: boolean
    }
}

@enduml